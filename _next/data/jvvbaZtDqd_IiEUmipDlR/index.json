{"pageProps":{"projects":[{"id":"cg-ball-of-lava-shader-unity","aliases":["ball-of-lava-shader-unity"],"date":"2022-10","thumbnailUrl":"/images/portfolio/cg-ball-of-lava-shader-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/cg-ball-of-lava-shader-unity/thumbnail.gif","imagesUrls":["/images/portfolio/cg-ball-of-lava-shader-unity/7.gif","/images/portfolio/cg-ball-of-lava-shader-unity/6.gif","/images/portfolio/cg-ball-of-lava-shader-unity/5.gif","/images/portfolio/cg-ball-of-lava-shader-unity/4.gif","/images/portfolio/cg-ball-of-lava-shader-unity/3.gif","/images/portfolio/cg-ball-of-lava-shader-unity/2.gif","/images/portfolio/cg-ball-of-lava-shader-unity/1.gif"],"youtubeVideoIds":["r5qDHvfYG9c"],"previewImageUrl":null,"title":"Ball of Lava Shader","subtitle":"Written in Cg with ShaderLab, for the Built-in RP in Unity","description":[],"implementationDetails":["Using the Perlin Noise algorithm to displace vertices in the mesh, during the Vertex Shader Stage.","Using _Time to animate the Perlin Noise, also multiplying by _Displacement and _NoiseVelocity to control how much and how fast the noise is.","Displacing the uv coordinates to simulate rotation, multiplying by _RotationVelocity to control the speed.","Generating a Mesh and making sure the UV map wraps correctly, so the Perlin noise doesn't generate weird shapes in the mesh.","Lerping between colors using steps."],"tags":["Cg","Built-in RP","ShaderLab","Unity","Vertex Shader","Fragment Shader"],"gitHubUrl":"https://github.com/z4gon/cg-ball-of-lava-shader-unity","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"cardConfig":{"backgroundSize":"120%","backgroundPosition":"13px 3px","gradientColor":"rgb(109, 23, 0)"}},{"id":"cg-surface-shaders-unity","aliases":[],"date":"2022-10","thumbnailUrl":"/images/portfolio/cg-surface-shaders-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/cg-surface-shaders-unity/thumbnail.gif","imagesUrls":["/images/portfolio/cg-surface-shaders-unity/9.gif","/images/portfolio/cg-surface-shaders-unity/8a.gif","/images/portfolio/cg-surface-shaders-unity/8b.gif","/images/portfolio/cg-surface-shaders-unity/5.gif","/images/portfolio/cg-surface-shaders-unity/4.gif","/images/portfolio/cg-surface-shaders-unity/3.gif","/images/portfolio/cg-surface-shaders-unity/7.gif","/images/portfolio/cg-surface-shaders-unity/6.gif","/images/portfolio/cg-surface-shaders-unity/2.gif","/images/portfolio/cg-surface-shaders-unity/1.gif","/images/portfolio/cg-surface-shaders-unity/10.gif","/images/portfolio/cg-surface-shaders-unity/11.png"],"youtubeVideoIds":["QF2svyMgkRQ"],"previewImageUrl":null,"title":"Standard Surface Shaders","subtitle":"Written in the Cg programming language for Unity Built-In RP","description":[],"implementationDetails":["Lambert Lighting, Blinn-Phong Lighting and Custom Lighting models.","Standard Surface Shaders in Unity using the #pragma directive to define the surface function and the lighting model.","Setting the Albedo property from a texture.","Normals implemented using a Normal Map or \"Bump Map\".","Fresnel shader implemented doing the dot scalar multiplication between the Normal and the IN.viewDir.","Environment Mapping using a SkyBox or Cube Map, then using the Unity provided worldRefl vector to derive the texel using texCUBE.","Combine Normal Maps and Environment Mapping, using the Unity provided INTERNAL_DATA macro and the WorldReflectionVector()","Using the Binn-Phong lighting model in a Standard Surface Shader.","Implementing a Custom Lambert Lighting model.","Toon Shading implemented with a ramped Lambert lighting model and an Outline shader implemented in a second Pass.","Utilizing the Standard, physically correct lighting model.","Writing a custom unlit shader for manual implementation of Lambert Lighting, Ambient Illumination and Shadow Casting/Receiving."],"tags":["Cg","Built-in RP","ShaderLab","Unity","Surface Shader","Lighting"],"gitHubUrl":"https://github.com/z4gon/cg-surface-shaders-unity","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"cardConfig":{"backgroundSize":"120%","backgroundPosition":"10px 0px","gradientColor":"rgb(0, 77, 159)"}},{"id":"ground-slash-vfx-unity","aliases":[],"date":"2022-9","thumbnailUrl":"/images/portfolio/ground-slash-vfx-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/ground-slash-vfx-unity/thumbnail.gif","imagesUrls":["/images/portfolio/ground-slash-vfx-unity/thumbnail.gif","/images/portfolio/ground-slash-vfx-unity/13-finished.gif","/images/portfolio/ground-slash-vfx-unity/12-spawn-debris-gravity.gif","/images/portfolio/ground-slash-vfx-unity/11-debris-cell-fracture.gif","/images/portfolio/ground-slash-vfx-unity/10-ground-shooter-script.gif","/images/portfolio/ground-slash-vfx-unity/9-first-person-character-controller.gif","/images/portfolio/ground-slash-vfx-unity/8-decals.gif","/images/portfolio/ground-slash-vfx-unity/7-spawn-trail.gif","/images/portfolio/ground-slash-vfx-unity/6-spawn-over-distance.gif","/images/portfolio/ground-slash-vfx-unity/5-gradient-fade.gif","/images/portfolio/ground-slash-vfx-unity/4-mesh-output.gif","/images/portfolio/ground-slash-vfx-unity/3-slash-model.gif","/images/portfolio/ground-slash-vfx-unity/2-uv-maps.gif","/images/portfolio/ground-slash-vfx-unity/1-model-uv-map.gif"],"youtubeVideoIds":["pybsA5K_S-c"],"previewImageUrl":null,"title":"Ground Slash VFX","subtitle":"With VFX Graph in Unity for URP","description":[],"implementationDetails":["Modelling of the 3D Meshes for the Slash and the Debris.","UV Mapping for the gradient texture of the Slash mesh.","Utilize VFX Graph","Spawning particles over distance, so the VFX leaves a trail of debris.","Decals to leave a burning effect on the ground/geometry.","Programming to snap the VFX to the geometry it goes over, to make it adjust dynamically to it.","Debris with random velocities, gravity and collision with plane.","First Person Character Controller with Input System to simulate the player using the VFX."],"tags":["VFX Graph","URP","Unity","VFX"],"gitHubUrl":"https://github.com/z4gon/ground-slash-vfx-unity","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"cardConfig":{"backgroundSize":"100%","backgroundPosition":"4px -14px","gradientColor":"rgb(134, 60, 0)"}},{"id":"ice-attack-vfx-unity","aliases":[],"date":"2022-9","thumbnailUrl":"/images/portfolio/ice-attack-vfx-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/ice-attack-vfx-unity/thumbnail.gif","imagesUrls":["/images/portfolio/ice-attack-vfx-unity/thumbnail.gif","/images/portfolio/ice-attack-vfx-unity/8-waves.gif","/images/portfolio/ice-attack-vfx-unity/7-snow-spike-vfx.gif","/images/portfolio/ice-attack-vfx-unity/6-snow-mesh.gif","/images/portfolio/ice-attack-vfx-unity/5-spikes.gif","/images/portfolio/ice-attack-vfx-unity/4-spike-test.gif","/images/portfolio/ice-attack-vfx-unity/3-dissolve-fresnel.gif","/images/portfolio/ice-attack-vfx-unity/2-spike-mesh.gif","/images/portfolio/ice-attack-vfx-unity/1-ground-textures.gif"],"youtubeVideoIds":["h4akS-e__9E"],"previewImageUrl":null,"title":"Ice Attack VFX","subtitle":"With VFX Graph and Shader Graph in Unity for URP","description":[],"implementationDetails":["Burst of 3 Delayed Waves utilizing Sub Graphs in VFX Graph.","Ground Texture particles.","Snow and Spike Meshes particles, with dissolve/fresnel shader.","Utilize VFX Graph","Random spawn position and rotation of particles.","Spikes tilt angle increases in each wave of the burst, also fully configurable","Configurable colors, fresnel power, particles size and count.","Dissolve and Fresnel shader implemented in Shader Graph, and integrated into the particles of VFX Graph utilizing the option for support for VFX Graph","3D Modeling in Blender."],"tags":["VFX Graph","Shader Graph","URP","Unity","VFX"],"gitHubUrl":"https://github.com/z4gon/ice-attack-vfx-unity","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"cardConfig":{"backgroundSize":"100%","backgroundPosition":"-10px -20px","gradientColor":"rgb(0, 121, 181)"}},{"id":"fire-vfx-unity","aliases":[],"date":"2022-9","thumbnailUrl":"/images/portfolio/fire-vfx-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/fire-vfx-unity/thumbnail.gif","imagesUrls":["/images/portfolio/fire-vfx-unity/thumbnail.gif","/images/portfolio/fire-vfx-unity/sparks.gif","/images/portfolio/fire-vfx-unity/lighting.gif","/images/portfolio/fire-vfx-unity/color.gif","/images/portfolio/fire-vfx-unity/with-normals.gif","/images/portfolio/fire-vfx-unity/flipbook-animation.gif","/images/portfolio/fire-vfx-unity/size-over-life-wind-and-drag-forces.gif","/images/portfolio/fire-vfx-unity/face-camera.gif","/images/portfolio/fire-vfx-unity/spawn-randomness.gif"],"youtubeVideoIds":["mn22mVaAxvg"],"previewImageUrl":null,"title":"Fire VFX","subtitle":"With VFX Graph in Unity for HDRP","description":[],"implementationDetails":["Flip book animation using a sprite sheet, a flip book player and normal maps","Particles with random velocity, angle, lifetime and evolving size over life.","Quads always facing the active camera.","Wind and Drag forces applied over the particles.","Color Multiply and Color over life.","Lighting using a Point Light.","Sparks effect implemented with a secondary particle system."],"tags":["VFX Graph","HDRP","Unity","VFX"],"gitHubUrl":"https://github.com/z4gon/fire-vfx-unity","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"cardConfig":{"backgroundSize":"100%","backgroundPosition":"-10px -40px","gradientColor":"rgb(102, 0, 119)"}},{"id":"water-shader-unity","aliases":[],"date":"2022-7","thumbnailUrl":"/images/portfolio/water-shader-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/water-shader-unity/thumbnail.gif","imagesUrls":["/images/portfolio/water-shader-unity/cliff.gif","/images/portfolio/water-shader-unity/lake.gif","/images/portfolio/water-shader-unity/water_waves.gif","/images/portfolio/water-shader-unity/water_depth_colored.gif","/images/portfolio/water-shader-unity/water_depth_refracted.gif","/images/portfolio/water-shader-unity/water_refraction.gif","/images/portfolio/water-shader-unity/water_foam.gif","/images/portfolio/water-shader-unity/water_depth.gif","/images/portfolio/water-shader-unity/water_colors.gif"],"youtubeVideoIds":["ag5X-ObzOY8","0AfmcD5DlXs","S920GVHesBM"],"previewImageUrl":null,"title":"Water Shader","subtitle":"With Shader Graph in Unity URP","description":["Water shader with dynamic configurations, which can simulate several environmental effects."],"implementationDetails":["Water depth effect using Scene Depth node (Camera Depth Buffer) and Screen Position node (Fragment Position)","Refractions using Screen Color node to render distorted objects behind the water, using Normals generated from height from a gradient noise.","Foam generated using the Scene Depth node and a gradient noise.","Waves achieved with geometry displacement, adding Normals multiplied by a gradient noise, effectively deforming the fragment geometry."],"tags":["Shader Graph","URP","Unity","VFX"],"gitHubUrl":"https://github.com/z4gon/water-shader-unity","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"cardConfig":{"backgroundSize":"100%","backgroundPosition":"0px 0px","gradientColor":"rgb(0, 83, 157)"}},{"id":"starcat","aliases":[],"date":"2022-7","thumbnailUrl":"/images/portfolio/starcat/thumbnail.gif","metaImageUrl":"/images/portfolio/starcat/thumbnail.gif","imagesUrls":["/images/portfolio/starcat/screen-1.jpg","/images/portfolio/starcat/screen-2.png","/images/portfolio/starcat/screen-3.png","/images/portfolio/starcat/screen-4.png","/images/portfolio/starcat/screen-5.png","/images/portfolio/starcat/screen-6.png"],"youtubeVideoIds":["3EQ1cwSD_BY"],"previewImageUrl":null,"title":"The Star Cat","subtitle":"Published Mobile Game for iOS & Android","description":["I am the solo indie developer on the project. Managed everything from conception, art & programming until deployment in AppStore and PlayStore.","A stylish 2D Side-Scroller with a cat character that shoots a weapon. The player has to destroy enemies and avoid obstacles.","The game is developed in Unity3D engine."],"implementationDetails":["Gameplay programming and behaviors for Unity with C#.","Designing architecture for testability and reusability of systems.","Dependency injection using Zenject.","Game mechanics, enemy attacks with the command pattern and coroutines.","2D Animations using Unity Animator / Mecanim.","UI elements and animations.","Optimization of sprite assets for reduced app bundle size, sprite atlases.","Integrating audio assets from the Asset Store, working with AudioSources and Mixers.","Unity Ads, integrating the SDK and managing the Unity Ads dashboard configs.","CI/CD with Unity Cloud Build and integrating with the APIs of PlayStore/AppStore for automated deploy of builds.","Unit Tests for EditMode/PlayMode.","TestFlight in the AppStore and internal testing tracks in the PlayStore.","Production deploy of apps in the PlayStore Console and the AppStore Connect.","AssetBundles and LoadAsync for memory usage optimization.","ScriptableObjects."],"tags":["iOS","Android","Unity","C#","Mobile Game"],"gitHubUrl":null,"links":[{"href":"https://nochegames.com","text":"Noche Games Website"}],"appleAppStoreUrl":"https://apps.apple.com/us/app/the-star-cat/id1544668944","googlePlayStoreUrl":"https://play.google.com/store/apps/details?id=com.NightOwlGames.Starcat","cardConfig":{"backgroundSize":"100%","backgroundPosition":"-10px -70px","gradientColor":"rgb(125, 0, 0)"}},{"id":"cg-perlin-noise-shader-unity","aliases":[],"date":"2022-10","thumbnailUrl":"/images/portfolio/cg-perlin-noise-shader-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/cg-perlin-noise-shader-unity/thumbnail.gif","imagesUrls":["/images/portfolio/cg-perlin-noise-shader-unity/4.gif","/images/portfolio/cg-perlin-noise-shader-unity/3.gif","/images/portfolio/cg-perlin-noise-shader-unity/2.gif","/images/portfolio/cg-perlin-noise-shader-unity/1.gif"],"youtubeVideoIds":["d1HJ0O3btq0"],"previewImageUrl":null,"title":"Perlin Noise Shader","subtitle":"Written in Cg with ShaderLab, for the Built-in RP in Unity","description":[],"implementationDetails":["Implement the Perlin Noise Algorithm","Slice the surface in a grid of rectangles, given the amount of columns and rows.","Assign a pseudo-random gradient vector of magnitude 1, to each cross point in the grid. These will act as influence vectors for the pixels inside the square.","Use a permutations array to generate pseudo-random constant gradients.","Calculate the distance for every pixel, to each corner of the containing square.","Do the dot scalar multiplication between the distance vector and the corresponding gradient vector.","Interpolate the 4 dot values for the current pixel.","Optionally use _Time to rotate the gradient vectors over time."],"tags":["Cg","Built-in RP","ShaderLab","Unity","Vertex Shader","Fragment Shader"],"gitHubUrl":"https://github.com/z4gon/cg-perlin-noise-shader-unity","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"cardConfig":{"backgroundSize":"120%","backgroundPosition":"-10px -20px","gradientColor":"rgb(108, 0, 51)"}},{"id":"cg-texture-shaders-unity","aliases":[],"date":"2022-10","thumbnailUrl":"/images/portfolio/cg-texture-shaders-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/cg-texture-shaders-unity/thumbnail.gif","imagesUrls":["/images/portfolio/cg-texture-shaders-unity/3.gif","/images/portfolio/cg-texture-shaders-unity/2.gif","/images/portfolio/cg-texture-shaders-unity/1d.gif","/images/portfolio/cg-texture-shaders-unity/1b.gif"],"youtubeVideoIds":["G0M9q3efZ1M"],"previewImageUrl":null,"title":"Cg Texture Shaders","subtitle":"Written in Cg with ShaderLab, for the Built-in RP in Unity","description":[],"implementationDetails":["Texture manipulation shaders","Using the 2D Property type in ShaderLab and the sampler2D data type in Cg.","Mapping the uv coordinates to a texel using the tex2D function.","Flipping and rotating uv coordinates.","Ripple effect calculated using a radial vector to the center of the quad.","Transition and blending between textures using smoothstep."],"tags":["Cg","Built-in RP","ShaderLab","Unity","Fragment Shader"],"gitHubUrl":"https://github.com/z4gon/cg-texture-shaders-unity","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"cardConfig":{"backgroundSize":"100%","backgroundPosition":"20px -16px","gradientColor":"rgb(0, 69, 157)"}},{"id":"cg-shaping-shaders-unity","aliases":[],"date":"2022-10","thumbnailUrl":"/images/portfolio/cg-shaping-shaders-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/cg-shaping-shaders-unity/thumbnail.gif","imagesUrls":["/images/portfolio/cg-shaping-shaders-unity/thumbnail.gif","/images/portfolio/cg-shaping-shaders-unity/19.gif","/images/portfolio/cg-shaping-shaders-unity/17.gif","/images/portfolio/cg-shaping-shaders-unity/16b.gif","/images/portfolio/cg-shaping-shaders-unity/15.gif","/images/portfolio/cg-shaping-shaders-unity/14.gif","/images/portfolio/cg-shaping-shaders-unity/13.gif","/images/portfolio/cg-shaping-shaders-unity/12.gif","/images/portfolio/cg-shaping-shaders-unity/11b.gif","/images/portfolio/cg-shaping-shaders-unity/10.gif","/images/portfolio/cg-shaping-shaders-unity/9.gif","/images/portfolio/cg-shaping-shaders-unity/8c.gif","/images/portfolio/cg-shaping-shaders-unity/7.gif","/images/portfolio/cg-shaping-shaders-unity/6b.gif","/images/portfolio/cg-shaping-shaders-unity/4.gif"],"youtubeVideoIds":["PWh5ksoYrLM"],"previewImageUrl":null,"title":"Cg Shaping Shaders","subtitle":"Written in Cg with ShaderLab, for the Built-in RP in Unity","description":[],"implementationDetails":["Creating simple Unlit Shaders in the Built-in RP in Unity.","Using the uniform _Time to define sinusoidal functions.","ShaderLab to link the Cg program with the Unity Editor, to expose properties to use in the Shader.","Defining the Vertex Shader and Fragment Shader functions.","Working with interpolated custom data coming from the Vertex Shader Stage.","Working with UVs and Object Position coordinates.","Using Step, Smoothstep, Saturate and Clamp, from the stdlib in Cg.","Implementing shaping functions to test if a pixel belongs to a circle, rectangle or polygon.","Matrices for Rotation and Scaling, multiplication of matrices and vectors for transformation of coordinates.","Tracking of the Mouse pointer, then feeding it into the Material, for later use in the Cg program code in the Shader.","Tiling of the UVs coordinates.","Drawing lines using equations such as y = x, y = sin(x).","Implementing a SONAR hud with shaping functions, using the vector dot scalar multiplication to calculate the magnitude of the projection of a vector onto a second vector.","SONAR gradient using atan2 and angles subtraction to measure the angle in radians from the SONAR line.","Using Cg semantics for compatibility with different GPU hardware."],"tags":["Cg","Built-in RP","ShaderLab","Unity","Vertex Shader","Fragment Shader"],"gitHubUrl":"https://github.com/z4gon/cg-shaping-shaders-unity","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"cardConfig":{"backgroundSize":"100%","backgroundPosition":"10px -18px","gradientColor":"rgb(0, 91, 0)"}},{"id":"cg-stencil-buffer-unity","aliases":[],"date":"2022-10","thumbnailUrl":"/images/portfolio/cg-stencil-buffer-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/cg-stencil-buffer-unity/thumbnail.gif","imagesUrls":["/images/portfolio/cg-stencil-buffer-unity/thumbnail.gif","/images/portfolio/cg-stencil-buffer-unity/1.png"],"youtubeVideoIds":[],"previewImageUrl":"/images/portfolio/cg-stencil-buffer-unity/thumbnail.gif","title":"X-Ray Stencil Buffer","subtitle":"X-Ray shader using the stencil buffer in Unity 2021.3.10f1 Built-in RP written in the Cg programming language","description":[],"implementationDetails":["In Built-in RP using Surface Shader and the Hull/Domain/Geometry shader stages, using the #pragma directive for tessellation."],"tags":["Cg","Built-in RP","Unity"],"gitHubUrl":"https://github.com/z4gon/cg-stencil-buffer-unity","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"cardConfig":{"backgroundSize":"100%","backgroundPosition":"-5px 0px","gradientColor":"rgb(84, 119, 155)"}},{"id":"tessellation-unity","aliases":[],"date":"2022-10","thumbnailUrl":"/images/portfolio/tessellation-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/tessellation-unity/thumbnail.gif","imagesUrls":["/images/portfolio/tessellation-unity/thumbnail.gif","/images/portfolio/tessellation-unity/4.gif","/images/portfolio/tessellation-unity/3.gif","/images/portfolio/tessellation-unity/2.gif","/images/portfolio/tessellation-unity/1.gif"],"youtubeVideoIds":[],"previewImageUrl":"/images/portfolio/tessellation-unity/thumbnail.gif","title":"Tessellation","subtitle":"Tessellation in Unity, both with Cg for Surface Shaders and HDRP with Compute Shader","description":[],"implementationDetails":["In Built-in RP using Surface Shader and the Hull/Domain/Geometry shader stages, using the #pragma directive for tessellation.","Exploring limitations of the Metal graphics API for geometry shader stages, and the preferred Compute Shader way of doing tessellation.","Implementing the baked in tessellation in the HDRP."],"tags":["Built-in RP","HDRP","Tessellation"],"gitHubUrl":"https://github.com/z4gon/tessellation-unity","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"cardConfig":{"backgroundSize":"140%","backgroundPosition":"5px 0px","gradientColor":"rgb(84, 119, 155)"}}]},"__N_SSG":true}