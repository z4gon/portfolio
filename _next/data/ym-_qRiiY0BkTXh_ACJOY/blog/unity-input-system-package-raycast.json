{"pageProps":{"post":{"slug":"unity-input-system-package-raycast","date":"2023-05-29T01:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Unity: Input System Package + Raycasting","excerpt":"Using Input Action events to Raycast points from Screen Space onto a Plane.","coverImageUrl":"/images/blog/unity-input-system-package-raycast/4.jpg","coverImageSourceUrl":"","coverVideoUrl":"/videos/blog/unity-input-system-package-raycast/1.mp4","markdownContent":"\n## References\n\n- [Input System Interactions Explained](https://www.youtube.com/watch?v=rMlcwtoui4I)\n- [GameObject components for input](https://docs.unity3d.com/Packages/com.unity.inputsystem@1.0/manual/Components.html)\n- [Responding to Actions](https://docs.unity3d.com/Packages/com.unity.inputsystem@1.0/manual/Actions.html#started-performed-and-canceled-callbacks)\n\n## Table of Content\n\n- [References](#references)\n- [Table of Content](#table-of-content)\n- [Input Actions](#input-actions)\n- [Raycast](#raycast)\n\n---\n\n## Input Actions\n\n- Install the `Input System Package` and create an `Input Action` asset.\n- Define an action for `Move` with action type `Button` and interaction `Press`.\n- Add a `Player Input` component to the Game Object, and set its behavior to `Invoke Unity Events`.\n- Bind the events to `OnMoveAction` and `OnPointerPosition`\n\n![Picture](/images/blog/unity-input-system-package-raycast/1.jpg)\n![Picture](/images/blog/unity-input-system-package-raycast/2.jpg)\n![Picture](/images/blog/unity-input-system-package-raycast/3.jpg)\n\n---\n\n## Raycast\n\n- If `isMoving` use the `value` coming from the `PointerPosition` action, and use it as a `Screen Position` vector.\n- Use `Camera.ScreenPointToRay` to obtain a ray and raycast it onto the plane.\n- Move the player to the hit transform position.\n\n```cs\nprivate Camera mainCamera;\nprivate LayerMask raycastLayerMask;\nprivate float raycastMaxDistance = 40;\nprivate bool isMoving = false;\n\npublic void OnMoveAction(InputAction.CallbackContext context)\n{\n    if (context.performed)\n    {\n        isMoving = true;\n    }\n    else if (context.canceled)\n    {\n        isMoving = false;\n    }\n}\n\npublic void OnPointerPosition(InputAction.CallbackContext context)\n{\n    if (!isMoving)\n    {\n        return;\n    }\n\n    var point = context.ReadValue<Vector2>();\n    var ray = mainCamera.ScreenPointToRay(point);\n    RaycastHit hit;\n\n    if (\n        Physics.Raycast(\n            ray,\n            out hit,\n            raycastMaxDistance,\n            raycastLayerMask,\n            QueryTriggerInteraction.Collide\n        )\n    )\n    {\n        transform.position = hit.point;\n    }\n}\n```\n\n![Picture](/images/blog/unity-input-system-package-raycast/4.jpg)\n"}},"__N_SSG":true}