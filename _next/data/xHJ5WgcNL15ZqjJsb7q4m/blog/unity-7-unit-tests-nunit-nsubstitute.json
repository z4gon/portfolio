{"pageProps":{"post":{"slug":"unity-7-unit-tests-nunit-nsubstitute","date":"2023-06-06T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Unity: Writing Unit Tests with NSubstitute","excerpt":"Use the Unity Test Framework, NUnit and NSubstitute to test your game.","coverImageUrl":"/images/blog/unity-7-unit-tests-nunit-nsubstitute/0.jpg","coverImageSourceUrl":"","coverVideoUrl":"","markdownContent":"\n## References\n\n- [About Unity Test Framework](https://docs.unity3d.com/Packages/com.unity.test-framework@1.1/manual/index.html)\n- [What Is NUnit](https://nunit.org/)\n- [Assert.Greater](https://docs.nunit.org/articles/nunit/writing-tests/assertions/classic-assertions/Assert.Greater.html)\n- [NSubstitute](https://nsubstitute.github.io/)\n- [Managed plug-ins](https://docs.unity3d.com/Manual/UsingDLL.html)\n- [NSubstitute NuGet](https://www.nuget.org/packages/NSubstitute/5.0.0)\n\n## Table of Content\n\n- [References](#references)\n- [Table of Content](#table-of-content)\n- [Install the Unity Test Framework](#install-the-unity-test-framework)\n- [Assembly Definitions](#assembly-definitions)\n- [Tests Files](#tests-files)\n- [Add NSubstitute](#add-nsubstitute)\n- [Tests Examples](#tests-examples)\n\n---\n\n## Install the Unity Test Framework\n\n- Make sure the `Test Framework` package is installed in the project and updated.\n\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/1.jpg)\n\n---\n\n## Assembly Definitions\n\n- Create two `Assembly Definitions`, one for the `Edit Mode` tests and another for the `Play Mode` tests.\n- `Edit Mode` tests only run in the `Unity Editor` and have access to the `Editor` code in addition to the game code.\n\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/2.jpg)\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/3.jpg)\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/15.jpg)\n\n- Make sure to add a reference to the `Assembly Definition` with the code for your game, so you can tests its classes.\n\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/6.jpg)\n\n---\n\n## Tests Files\n\n- Create test files using the template or write your own from scratch.\n\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/4.jpg)\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/5.jpg)\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/7.jpg)\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/8.jpg)\n\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/15.jpg)\n\n---\n\n## Add NSubstitute\n\n- You will need to obtain the `.dll` from the `NuGet` registry manually, and add it to the Unity project as a `Managed Plug-in` (Which is a .NET assembly).\n- Go to the `NuGet` package for `NSubstitue` and download the `.nupkg`\n\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/10.jpg)\n\n- Change the extension to `.zip` to be able to extract its contents.\n\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/9.jpg)\n\n- Copy over the `.dll` corresponding to the `Api Compatibility Level` set in the `Player Settings` of your project. (Most likely `.NET Standard 2.1`)\n- Repeat the process for any dependency of the library.\n\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/16.jpg)\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/14.jpg)\n\n- Reference the `Assembly` in the `Assembly Definition` of your tests, to be able to use `NSubstitute`.\n\n![Picture](/images/blog/unity-7-unit-tests-nunit-nsubstitute/11.jpg)\n\n---\n\n## Tests Examples\n\n- `[UnityTest]` tests allow you to skip a frame in the simulation by doing `yield return null`, or skip many doing `yield return new WaitForSeconds()`.\n- `[Test]` tests don't run the simulation of the game, you can't skip frames.\n\n```cs\n[UnityTest]\npublic IEnumerator test__on_trigger_enter__invokes_gun_reclaim_bullet()\n{\n    var gun = Substitute.For<IGun>();\n\n    var bullet = CreateBullet();\n    bullet.gun = gun;\n    bullet.speed = 20.0f;\n\n    var limits = CreateProjectilesLimit();\n\n    yield return new WaitForSeconds(0.05f);\n\n    gun.Received().ReclaimBullet(bullet);\n\n    GameObject.Destroy(bullet.gameObject);\n    GameObject.Destroy(limits.gameObject);\n}\n\npublic static Bullet CreateBullet()\n{\n    var obj = new GameObject(\"Bullet\");\n    obj.layer = LAYER_PLAYER_PROJECTILES;\n\n    var rigidbody = obj.AddComponent<Rigidbody>();\n    rigidbody.useGravity = false;\n\n    var collider = obj.AddComponent<BoxCollider>();\n    collider.size = new Vector3(1.0f, 1.0f, 1.0f);\n    collider.isTrigger = true;\n\n    var bullet = obj.AddComponent<Bullet>();\n\n    return bullet;\n}\n\nprivate BoxCollider CreateProjectilesLimit()\n{\n    var obj = new GameObject(\"ProjectilesLimit\");\n    obj.layer = Utils.LAYER_PROJECTILES_LIMITS;\n\n    obj.transform.position = new Vector3(0.0f, 0.0f, 1.1f);\n\n    var collider = obj.AddComponent<BoxCollider>();\n    collider.size = new Vector3(5.0f, 5.0f, 1.0f);\n    collider.isTrigger = true;\n\n    return collider;\n}\n```\n"}},"__N_SSG":true}