{"pageProps":{"post":{"slug":"unity-5-projectiles-object-pooling","date":"2023-06-03T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Unity: Physics Projectiles, Coroutines and Object Pooling","excerpt":"Using Corotuines and Object Pools to instantiate projectiles, and Ribidbodies for simple physics.","coverImageUrl":"/resources/blog/unity-5-projectiles-object-pooling/3.jpg","coverImageSourceUrl":"","coverVideoUrl":"/resources/blog/unity-5-projectiles-object-pooling/1.mp4","markdownContent":"\n## References\n\n- [ObjectPool](https://docs.unity3d.com/ScriptReference/Pool.ObjectPool_1.html)\n- [ObjectPool Constructor](https://docs.unity3d.com/ScriptReference/Pool.ObjectPool_1-ctor.html)\n- [OnDestroy](https://docs.unity3d.com/2017.1/Documentation/ScriptReference/MonoBehaviour.OnDestroy.html)\n\n## Table of Content\n\n- [References](#references)\n- [Table of Content](#table-of-content)\n- [Projectile: Bullet](#projectile-bullet)\n- [ObjectPool: Gun](#objectpool-gun)\n  - [Properties](#properties)\n  - [Initialize Object Pool](#initialize-object-pool)\n  - [Object Pool Event Handlers](#object-pool-event-handlers)\n  - [Shoot Projectiles](#shoot-projectiles)\n- [Player](#player)\n- [All the Pieces Together](#all-the-pieces-together)\n- [Correcting Projectile Trajectory](#correcting-projectile-trajectory)\n\n---\n\n## Projectile: Bullet\n\n- For now, a simple component that has a `Collider` and a `Rigidbody`.\n- The `Rigidbody` will not be kinematic, to be able to use `Velocity`. And will ignore gravity, to follow a straight line.\n\n```cs\npublic float speed\n{\n    get { return rigidBody.velocity.z; }\n    set { rigidBody.AddForce(transform.forward * value, ForceMode.VelocityChange); }\n}\nprivate Rigidbody rigidBody;\n\nprivate void Awake()\n{\n    rigidBody = GetComponent<Rigidbody>();\n}\n```\n\n---\n\n## ObjectPool: Gun\n\n- This component will use the `ObjectPool` to store the `Bullet` game objects.\n- It will also define a `Coroutine` to periodically fire the gun, and shoot projectiles.\n\n### Properties\n\n```cs\npublic Bullet bulletPrefab;\npublic float bulletsPerSecond;\npublic float bulletSpeed;\npublic int defaultBulletsPoolCapacity = 10;\npublic int maxBulletsPoolSize = 20;\nprivate ObjectPool<Bullet> bulletsPool;\nprivate Coroutine shootCoroutine;\n```\n\n### Initialize Object Pool\n\n```cs\nvoid Awake()\n{\n    bulletsPool = new ObjectPool<Bullet>(\n        createFunc: CreatePooledBullet,\n        actionOnGet: OnGetBulletFromPool,\n        actionOnRelease: OnReleaseBulletToPool,\n        actionOnDestroy: OnDestroyBulletFromPool,\n        collectionCheck: true,\n        defaultCapacity: defaultBulletsPoolCapacity,\n        maxSize: maxBulletsPoolSize\n    );\n}\n```\n\n### Object Pool Event Handlers\n\n```cs\nprivate Bullet CreatePooledBullet() => Object.Instantiate(bulletPrefab, transform.position, transform.rotation);\nprivate void OnGetBulletFromPool(Bullet bullet) => bullet.gameObject.SetActive(true);\nprivate void OnReleaseBulletToPool(Bullet bullet) => bullet.gameObject.SetActive(false);\nvoid OnDestroyBulletFromPool(Bullet bullet) => Destroy(bullet.gameObject);\n```\n\n### Shoot Projectiles\n\n```cs\npublic void StartShooting()\n{\n    shootCoroutine = StartCoroutine(Shoot());\n}\n\npublic void StopShooting() => StopCoroutine(shootCoroutine);\n\nprivate IEnumerator Shoot()\n{\n    while (true)\n    {\n        var bullet = bulletsPool.Get();\n\n        if (bullet != null)\n        {\n            bullet.transform.position = transform.position;\n            bullet.transform.rotation = transform.rotation;\n            bullet.speed = bulletSpeed;\n        }\n\n        yield return new WaitForSeconds(1.0f / bulletsPerSecond);\n    }\n}\n```\n\n---\n\n## Player\n\n- The `Player` game object will react to player input, and shoot projectiles.\n\n```cs\npublic List<Gun> guns = new List<Gun>();\n\npublic void OnShootAction(InputAction.CallbackContext context)\n{\n    if (context.performed)\n        StartShooting();\n    else if (context.canceled)\n        StopShooting();\n}\n\nprivate void StartShooting()\n{\n    foreach (var gun in guns)\n        gun.StartShooting();\n}\n\nprivate void StopShooting()\n{\n    foreach (var gun in guns)\n        gun.StopShooting();\n}\n```\n\n---\n\n## All the Pieces Together\n\n![Picture](/resources/blog/unity-5-projectiles-object-pooling/1.jpg)\n\n---\n\n## Correcting Projectile Trajectory\n\n- Given the perspective of the camera, projectiles that are aligned to the direction of the player do not follow a straight line in the viewport.\n- This is a problem since the player won't be able to aim for enemies in the top left and right corners.\n\n![Picture](/resources/blog/unity-5-projectiles-object-pooling/2.jpg)\n\n- Using a `Raycast` again, to get the corresponding point at the top edge, we can make the `Player` to `LookAt` it.\n- This effectively makes the aiming dynamic, and keeps a straight like of projectiles in the viewport.\n\n```cs\npublic void OnPointerPosition(InputAction.CallbackContext context)\n{\n    ...\n\n    // look at\n    point = new Vector2(point.x, Screen.height);\n    ray = mainCamera.ScreenPointToRay(point);\n    if (boundaries.plane.Raycast(ray, out distance))\n    {\n        transform.LookAt(ray.GetPoint(distance), Vector3.up);\n    }\n}\n```\n\n![Picture](/resources/blog/unity-5-projectiles-object-pooling/3.jpg)\n"}},"__N_SSG":true}