{"pageProps":{"post":{"slug":"unity-3-plane-raycast","date":"2023-05-31T01:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Unity: Using Plane.Raycast","excerpt":"Optimizing the Raycast to use pure geometry instead of doing Physics Queries to check collisions with colliders.","heroImageUrl":"/resources/blog/unity-3-plane-raycast/1.jpg","heroImageSourceUrl":"","heroVideoUrl":"","markdownContent":"\n## References\n\n- [Plane](https://docs.unity3d.com/ScriptReference/Plane.html)\n- [Plane.Raycast](https://docs.unity3d.com/ScriptReference/Plane.Raycast.html)\n\n## Table of Content\n\n- [References](#references)\n- [Table of Content](#table-of-content)\n- [Optimization](#optimization)\n- [Raycast to the Plane](#raycast-to-the-plane)\n- [Using the Input System](#using-the-input-system)\n\n---\n\n## Optimization\n\n- This operation is more efficient than the physics based Raycast with colliders.\n- Instead of making Physics Queries, and checking for Colliders in the Scene, this operation is purely geometrical.\n\n---\n\n## Raycast to the Plane\n\n- Define a `Plane` using three points.\n- Use `Camera.ViewportPointToRay` to obtain a ray and raycast it onto the plane.\n- Obtain the point in space using `ray.getPoint(distance)`.\n\n```cs\npublic Camera mainCamera;\npublic Transform bottomLeft;\npublic Transform topRight;\nprivate Plane plane;\n\nvoid Awake()\n{\n    this.plane = new Plane(transform.position, bottomLeft.position, topRight.position);\n    PositionCorner(new Vector2(0.0f, 0.0f), bottomLeft);\n    PositionCorner(new Vector2(1.0f, 1.0f), topRight);\n}\n\nprivate void PositionCorner(Vector2 viewportPoint, Transform corner)\n{\n    var distance = 0.0f;\n    var ray = mainCamera.ViewportPointToRay(viewportPoint);\n    if (this.plane.Raycast(ray, out distance))\n    {\n        corner.transform.position = ray.GetPoint(distance);\n    }\n}\n```\n\n---\n\n## Using the Input System\n\n- Same as before, but using `Camera.ScreenPointToRay`.\n\n```cs\npublic Camera mainCamera;\npublic Plane plane;\nprivate bool isMoving = false;\n\npublic void OnMoveAction(InputAction.CallbackContext context)\n{\n    isMoving = context.performed;\n}\n\npublic void OnPointerPosition(InputAction.CallbackContext context)\n{\n    if (!isMoving) { return; }\n\n    var point = context.ReadValue<Vector2>();\n\n    var distance = 0.0f;\n    var ray = mainCamera.ScreenPointToRay(point);\n    if (this.plane.Raycast(ray, out distance))\n    {\n        transform.position = ray.GetPoint(distance);\n    }\n}\n```\n\n![Picture](/resources/blog/unity-3-plane-raycast/1.jpg)\n"}},"__N_SSG":true}