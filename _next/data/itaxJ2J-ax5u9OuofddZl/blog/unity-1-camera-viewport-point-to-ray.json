{"pageProps":{"post":{"slug":"unity-1-camera-viewport-point-to-ray","date":"2023-05-29T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Unity: Using Camera ViewportPointToRay","excerpt":"Raycasting from the Camera and finding the hit point in a plane, to determine a surface area corresponding to the proyected view from the Camera on the Plane.","heroImageUrl":"/resources/blog/unity-1-camera-viewport-point-to-ray/1.jpg","heroImageSourceUrl":"","heroVideoUrl":"/resources/blog/unity-1-camera-viewport-point-to-ray/1.mp4","markdownContent":"\n## References\n\n- [Physics.Raycast](https://docs.unity3d.com/ScriptReference/Physics.Raycast.html)\n- [Rays from the Camera](https://docs.unity3d.com/Manual/CameraRays.html)\n- [Camera.ViewportToScreenPoint](https://docs.unity3d.com/ScriptReference/Camera.ViewportToScreenPoint.html)\n- [Gizmos.DrawLine](https://docs.unity3d.com/ScriptReference/Gizmos.DrawLine.html)\n\n## Table of Content\n\n- [References](#references)\n- [Table of Content](#table-of-content)\n- [Using Raycast](#using-raycast)\n- [Drawing Gizmos](#drawing-gizmos)\n\n---\n\n## Using Raycast\n\nThe method `ViewportPointToRay` transforms a coordinate in viewport space (0,0) to (1,1) into a ray that starts from the corresponding point in the camera near clip plane and points into the direction coming from the camera transform position.\n\nUsing a trigger collider for a plane, you can raycast this ray and find the hit point in the surface.\n\nThis allows to generate a shape that corresponds to the camera view, proyected on a surface, even when the camera is tilted.\n\n```csharp\nprivate Camera mainCamera;\nprivate LayerMask raycastLayerMask;\nprivate float raycastMaxDistance = 40;\nprivate Transform[] corners;\n\nvoid Awake()\n{\n    PositionCorner(new Vector2(0.0f, 0.0f), corners[0]);\n    PositionCorner(new Vector2(1.0f, 1.0f), corners[1]);\n}\n\nprivate void PositionCorner(Vector2 viewportPoint, Transform corner)\n{\n    RaycastHit hit;\n    var ray = mainCamera.ViewportPointToRay(points[i]);\n    if (\n        Physics.Raycast(\n            ray,\n            out hit,\n            raycastMaxDistance,\n            raycastLayerMask,\n            QueryTriggerInteraction.Collide\n        )\n    )\n    {\n        corner.transform.position = hit.point;\n    }\n}\n```\n\n![Picture](/resources/blog/unity-1-camera-viewport-point-to-ray/3.jpg)\n\n---\n\n## Drawing Gizmos\n\nThe gizmos are useful for visualizing the area shape.\n\n```cs\nvoid OnDrawGizmos()\n{\n    if (corners != null && corners.Length > 1)\n    {\n        var botLeft = corners[0].transform.position;\n        var botRight = new Vector3(-botLeft.x, botLeft.y, botLeft.z);\n        var topRight = corners[1].transform.position;\n        var topLeft = new Vector3(-topRight.x, topRight.y, topRight.z);\n\n        Gizmos.color = Color.yellow;\n\n        Gizmos.DrawLine(topLeft, topRight);\n        Gizmos.DrawLine(botLeft, botRight);\n        Gizmos.DrawLine(botLeft, topLeft);\n        Gizmos.DrawLine(botRight, topRight);\n    }\n}\n```\n\n![Picture](/resources/blog/unity-1-camera-viewport-point-to-ray/1.jpg)\n"}},"__N_SSG":true}