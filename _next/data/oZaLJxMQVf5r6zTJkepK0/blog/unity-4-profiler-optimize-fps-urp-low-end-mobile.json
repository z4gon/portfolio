{"pageProps":{"post":{"slug":"unity-4-profiler-optimize-fps-urp-low-end-mobile","date":"2023-06-01T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Unity: Profile and Optimize FPS in low end devices with the Universal Render Pipeline","excerpt":"Disable post processing, SSAO and enable target frame rate to optimize FPS count in the Universal Rende Pipeline, for low end moible devices.","coverImageUrl":"/images/blog/unity-4-profiler-optimize-fps-urp-low-end-mobile/2.jpg","coverImageSourceUrl":"","coverVideoUrl":"","markdownContent":"\n## References\n\n- [Unity mobile device 30fps locked](https://stackoverflow.com/questions/47031279/unity-mobile-device-30fps-locked)\n\n## Table of Content\n\n- [References](#references)\n- [Table of Content](#table-of-content)\n- [Connect Devices to the Profiler](#connect-devices-to-the-profiler)\n- [SSAO and Post Processing](#ssao-and-post-processing)\n- [Target Frame Rate](#target-frame-rate)\n\n---\n\n## Connect Devices to the Profiler\n\n- Enable `Development Build` in the build settings, to allow the profiler to find and connect to running players.\n\n![Picture](/images/blog/unity-4-profiler-optimize-fps-urp-low-end-mobile/1.jpg)\n\n---\n\n## SSAO and Post Processing\n\n- `Screen Space Ambient Occlussion` and `Bloom Post Processing` were taking a toll on the performance.\n- The first step is to disable these.\n\n![Picture](/images/blog/unity-4-profiler-optimize-fps-urp-low-end-mobile/2.jpg)\n![Picture](/images/blog/unity-4-profiler-optimize-fps-urp-low-end-mobile/3.jpg)\n![Picture](/images/blog/unity-4-profiler-optimize-fps-urp-low-end-mobile/4.jpg)\n![Picture](/images/blog/unity-4-profiler-optimize-fps-urp-low-end-mobile/5.jpg)\n\n---\n\n## Target Frame Rate\n\n- A portion of the frame is still taking long, but there doesn't seem to be anything in particular causing it.\n- Profiling the GPU is not available for this device, so that is not of much help.\n\n![Picture](/images/blog/unity-4-profiler-optimize-fps-urp-low-end-mobile/6.jpg)\n\n- We can try setting the target frame rate to test if the engine can actually achieve the desired fps.\n\n```cs\nprivate const int TARGET_FRAME_RATE = 60;\n\nvoid Start()\n{\n    Application.targetFrameRate = TARGET_FRAME_RATE;\n    SceneManager.LoadScene(1);\n}\n```\n\n![Picture](/images/blog/unity-4-profiler-optimize-fps-urp-low-end-mobile/7.jpg)\n![Picture](/images/blog/unity-4-profiler-optimize-fps-urp-low-end-mobile/8.jpg)\n\n- Finally, the desired 60 FPS goal is reached.\n- From now on, profiling early and often will be key to identify changes that could introduce low performance.\n\n![Picture](/images/blog/unity-4-profiler-optimize-fps-urp-low-end-mobile/9.jpg)\n"}},"__N_SSG":true}