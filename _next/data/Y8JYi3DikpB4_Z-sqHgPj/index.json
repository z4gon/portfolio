{"pageProps":{"projects":[{"id":"cg-shaping-shaders-unity","date":"2022-10","thumbnailUrl":"/images/portfolio/cg-shaping-shaders-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/cg-shaping-shaders-unity/thumbnail.gif","imagesUrls":["/images/portfolio/cg-shaping-shaders-unity/thumbnail.gif","/images/portfolio/cg-shaping-shaders-unity/19.gif","/images/portfolio/cg-shaping-shaders-unity/17.gif","/images/portfolio/cg-shaping-shaders-unity/16b.gif","/images/portfolio/cg-shaping-shaders-unity/15.gif","/images/portfolio/cg-shaping-shaders-unity/14.gif","/images/portfolio/cg-shaping-shaders-unity/13.gif","/images/portfolio/cg-shaping-shaders-unity/12.gif","/images/portfolio/cg-shaping-shaders-unity/11b.gif","/images/portfolio/cg-shaping-shaders-unity/10.gif","/images/portfolio/cg-shaping-shaders-unity/9.gif","/images/portfolio/cg-shaping-shaders-unity/8c.gif","/images/portfolio/cg-shaping-shaders-unity/7.gif","/images/portfolio/cg-shaping-shaders-unity/6b.gif","/images/portfolio/cg-shaping-shaders-unity/4.gif"],"youtubeVideoIds":["PWh5ksoYrLM"],"title":"Cg Shaping Shaders","subtitle":"Written in Cg with ShaderLab, for the Built-in RP in Unity","description":["A collection of Shaping Shaders written in Cg for the Built-in RP in Unity, from basic to advanced."],"implementationDetails":["Creating simple Unlit Shaders in the Built-in RP in Unity.","Using the uniform _Time to define sinusoidal functions.","ShaderLab to link the Cg program with the Unity Editor, to expose properties to use in the Shader.","Defining the Vertex Shader and Fragment Shader functions.","Working with interpolated custom data coming from the Vertex Shader Stage.","Working with UVs and Object Position coordinates.","Using Step, Smoothstep, Saturate and Clamp, from the stdlib in Cg.","Implementing shaping functions to test if a pixel belongs to a circle, rectangle or polygon.","Matrices for Rotation and Scaling, multiplication of matrices and vectors for transformation of coordinates.","Tracking of the Mouse pointer, then feeding it into the Material, for later use in the Cg program code in the Shader.","Tiling of the UVs coordinates.","Drawing lines using equations such as y = x, y = sin(x).","Implementing a SONAR hud with shaping functions, using the vector dot scalar multiplication to calculate the magnitude of the projection of a vector onto a second vector.","SONAR gradient using atan2 and angles subtraction to measure the angle in radians from the SONAR line.","Using Cg semantics for compatibility with different GPU hardware."],"tags":["Cg","ShaderLab","Vertex Shader","Fragment Shader","Unity3D"],"gitHubUrl":"https://github.com/z4gon/cg-shaping-shaders-unity"},{"id":"ground-slash-vfx-unity","date":"2022-9","thumbnailUrl":"/images/portfolio/ground-slash-vfx-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/ground-slash-vfx-unity/thumbnail.gif","imagesUrls":["/images/portfolio/ground-slash-vfx-unity/thumbnail.gif","/images/portfolio/ground-slash-vfx-unity/13-finished.gif","/images/portfolio/ground-slash-vfx-unity/12-spawn-debris-gravity.gif","/images/portfolio/ground-slash-vfx-unity/11-debris-cell-fracture.gif","/images/portfolio/ground-slash-vfx-unity/10-ground-shooter-script.gif","/images/portfolio/ground-slash-vfx-unity/9-first-person-character-controller.gif","/images/portfolio/ground-slash-vfx-unity/8-decals.gif","/images/portfolio/ground-slash-vfx-unity/7-spawn-trail.gif","/images/portfolio/ground-slash-vfx-unity/6-spawn-over-distance.gif","/images/portfolio/ground-slash-vfx-unity/5-gradient-fade.gif","/images/portfolio/ground-slash-vfx-unity/4-mesh-output.gif","/images/portfolio/ground-slash-vfx-unity/3-slash-model.gif","/images/portfolio/ground-slash-vfx-unity/2-uv-maps.gif","/images/portfolio/ground-slash-vfx-unity/1-model-uv-map.gif"],"youtubeVideoIds":["pybsA5K_S-c"],"title":"Ground Slash VFX","subtitle":"With VFX Graph in Unity","description":["A ground slash attack vfx implemented with a Mesh, decal textures, VFX Graph and some programming. Made in Unity. "],"implementationDetails":["Modelling of the 3D Meshes for the Slash and the Debris.","UV Mapping for the gradient texture of the Slash mesh.","Spawning particles over distance, so the VFX leaves a trail of debris.","Decals to leave a burning effect on the ground/geometry.","Programming to snap the VFX to the geometry it goes over, to make it adjust dynamically to it.","Debris with random velocities, gravity and collision with plane.","First Person Character Controller with Input System to simulate the player using the VFX."],"tags":["Unity3D","VFX","VFX Graph"],"gitHubUrl":"https://github.com/z4gon/ground-slash-vfx-unity"},{"id":"ice-attack-vfx-unity","date":"2022-9","thumbnailUrl":"/images/portfolio/ice-attack-vfx-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/ice-attack-vfx-unity/thumbnail.gif","imagesUrls":["/images/portfolio/ice-attack-vfx-unity/thumbnail.gif","/images/portfolio/ice-attack-vfx-unity/8-waves.gif","/images/portfolio/ice-attack-vfx-unity/7-snow-spike-vfx.gif","/images/portfolio/ice-attack-vfx-unity/6-snow-mesh.gif","/images/portfolio/ice-attack-vfx-unity/5-spikes.gif","/images/portfolio/ice-attack-vfx-unity/4-spike-test.gif","/images/portfolio/ice-attack-vfx-unity/3-dissolve-fresnel.gif","/images/portfolio/ice-attack-vfx-unity/2-spike-mesh.gif","/images/portfolio/ice-attack-vfx-unity/1-ground-textures.gif"],"youtubeVideoIds":["h4akS-e__9E"],"title":"Ice Attack VFX","subtitle":"With VFX Graph and Shader Graph in Unity","description":["Ice Attack VFX with 3 waves of bursts, including textures, snow and spike meshes, randomness at spawn and dissolve animation. Color and fresnel fully configurable."],"implementationDetails":["Burst of 3 Delayed Waves utilizing Sub Graphs in VFX Graph.","Ground Texture particles.","Snow and Spike Meshes particles, with dissolve/fresnel shader.","Random spawn position and rotation of particles.","Spikes tilt angle increases in each wave of the burst, also fully configurable","Configurable colors, fresnel power, particles size and count.","Dissolve and Fresnel shader implemented in Shader Graph, and integrated into the particles of VFX Graph utilizing the option for support for VFX Graph","3D Modeling in Blender."],"tags":["Unity3D","VFX","VFX Graph","Shader Graph"],"gitHubUrl":"https://github.com/z4gon/ice-attack-vfx-unity"},{"id":"fire-vfx-unity","date":"2022-9","thumbnailUrl":"/images/portfolio/fire-vfx-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/fire-vfx-unity/thumbnail.gif","imagesUrls":["/images/portfolio/fire-vfx-unity/thumbnail.gif","/images/portfolio/fire-vfx-unity/sparks.gif","/images/portfolio/fire-vfx-unity/lighting.gif","/images/portfolio/fire-vfx-unity/color.gif","/images/portfolio/fire-vfx-unity/with-normals.gif","/images/portfolio/fire-vfx-unity/flipbook-animation.gif","/images/portfolio/fire-vfx-unity/size-over-life-wind-and-drag-forces.gif","/images/portfolio/fire-vfx-unity/face-camera.gif","/images/portfolio/fire-vfx-unity/spawn-randomness.gif"],"youtubeVideoIds":["mn22mVaAxvg"],"title":"Fire VFX","subtitle":"With VFX Graph in Unity","description":["Fire VFX with randomness at spawn, flip book animation, wind and drag forces, configurable color and sparks."],"implementationDetails":["Flip book animation using a sprite sheet, a flip book player and normal maps","Particles with random velocity, angle, lifetime and evolving size over life.","Quads always facing the active camera.","Wind and Drag forces applied over the particles.","Color Multiply and Color over life.","Lighting using a Point Light.","Sparks effect implemented with a secondary particle system."],"tags":["Unity3D","VFX","VFX Graph"],"gitHubUrl":"https://github.com/z4gon/fire-vfx-unity"},{"id":"water-shader-unity","date":"2022-7","thumbnailUrl":"/images/portfolio/water-shader-unity/thumbnail.gif","metaImageUrl":"/images/portfolio/water-shader-unity/thumbnail.gif","imagesUrls":["/images/portfolio/water-shader-unity/cliff.gif","/images/portfolio/water-shader-unity/lake.gif","/images/portfolio/water-shader-unity/water_waves.gif","/images/portfolio/water-shader-unity/water_depth_colored.gif","/images/portfolio/water-shader-unity/water_depth_refracted.gif","/images/portfolio/water-shader-unity/water_refraction.gif","/images/portfolio/water-shader-unity/water_foam.gif","/images/portfolio/water-shader-unity/water_depth.gif","/images/portfolio/water-shader-unity/water_colors.gif"],"youtubeVideoIds":["ag5X-ObzOY8","0AfmcD5DlXs","S920GVHesBM"],"title":"Water Shader","subtitle":"With Shader Graph in Unity","description":["Water shader with dynamic configurations, which can simulate several environmental effects."],"implementationDetails":["Water depth effect using Scene Depth node (Camera Depth Buffer) and Screen Position node (Fragment Position)","Refractions using Screen Color node to render distorted objects behind the water, using Normals generated from height from a gradient noise.","Foam generated using the Scene Depth node and a gradient noise.","Waves achieved with geometry displacement, adding Normals multiplied by a gradient noise, effectively deforming the fragment geometry."],"tags":["Unity3D","VFX","Shader Graph"],"gitHubUrl":"https://github.com/z4gon/water-shader-unity"},{"id":"starcat","date":"2022-7","thumbnailUrl":"/images/portfolio/starcat/thumbnail.gif","metaImageUrl":"/images/portfolio/starcat/meta.png","imagesUrls":["/images/portfolio/starcat/screen-1.jpg","/images/portfolio/starcat/screen-2.png","/images/portfolio/starcat/screen-3.png","/images/portfolio/starcat/screen-4.png","/images/portfolio/starcat/screen-5.png","/images/portfolio/starcat/screen-6.png"],"youtubeVideoIds":["3EQ1cwSD_BY"],"title":"The Star Cat","subtitle":"Published Mobile Game for iOS & Android","description":["I am the solo indie developer on the project. Managed everything from conception, art & programming until deployment in AppStore and PlayStore.","A stylish 2D Side-Scroller with a cat character that shoots a weapon. The player has to destroy enemies and avoid obstacles.","The game is developed in Unity3D engine."],"implementationDetails":["Gameplay programming and behaviors for Unity with C#.","Designing architecture for testability and reusability of systems.","Dependency injection using Zenject.","Game mechanics, enemy attacks with the command pattern and coroutines.","2D Animations using Unity Animator / Mecanim.","UI elements and animations.","Optimization of sprite assets for reduced app bundle size, sprite atlases.","Integrating audio assets from the Asset Store, working with AudioSources and Mixers.","Unity Ads, integrating the SDK and managing the Unity Ads dashboard configs.","CI/CD with Unity Cloud Build and integrating with the APIs of PlayStore/AppStore for automated deploy of builds.","Unit Tests for EditMode/PlayMode.","TestFlight in the AppStore and internal testing tracks in the PlayStore.","Production deploy of apps in the PlayStore Console and the AppStore Connect.","AssetBundles and LoadAsync for memory usage optimization.","ScriptableObjects."],"tags":["Unity3D","C#","iOS","Android","Mobile Game"],"links":[{"href":"https://nochegames.com","text":"Noche Games Website"}],"appleAppStoreUrl":"https://apps.apple.com/us/app/the-star-cat/id1544668944","googlePlayStoreUrl":"https://play.google.com/store/apps/details?id=com.NightOwlGames.Starcat"}]},"__N_SSG":true}