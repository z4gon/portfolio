{"pageProps":{"post":{"slug":"metal-render-pipeline-part-2-rendering-primitive-triangle","date":"2022-11-30T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 2: Rendering a primitive Triangle","excerpt":"Rendering a primitive triangle using the GPU, a vertices array, and a memory buffer. Writing a vertex function to access the individual vertices and passing them down to the fragment stage shader.","coverImageUrl":"/resources/blog/metal-render-pipeline-part-2-rendering-primitive-triangle/cover.jpg","coverImageSourceUrl":"","coverVideoUrl":"","markdownContent":"\n## Source Code\n\n[See Project in GitHub üë©‚Äçüíª](https://github.com/z4gon/metal-render-pipeline)\n\n## References\n\n- [Metal Render Pipeline tutorial series by Rick Twohy](https://www.youtube.com/playlist?list=PLEXt1-oJUa4BVgjZt9tK2MhV_DW7PVDsg)\n- [Metal Shading Language Specification](https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf)\n\n---\n\n## Table of Content\n\n- [Vertex Buffer](#vertex-buffer)\n- [Vertex Shader](#vertex-shader)\n- [Draw Primitives](#draw-primitives)\n- [Result](#result)\n\n---\n\n## Vertex Buffer\n\n[Rendering Primitives](https://developer.apple.com/documentation/metal/using_a_render_pipeline_to_render_primitives)\n[MTL Buffer](https://developer.apple.com/documentation/metal/mtlbuffer)\n\nDefine an array of vectors representing the vertices we want to draw in the screen.\n\n```swift\n// counter clock wise to define the face\nvar vertices: [float3] = [\n    float3(0, 1, 0),    // top mid\n    float3(-1, -1, 0),  // bot left\n    float3(1, -1, 0),   // top right\n]\n```\n\nDeclare the **memory buffer** which will be used to hold the vertices information in the **GPU**.\n\n```swift\nvar vertexBuffer: MTLBuffer!;\n```\n\nInitialize the **buffer** by creating it off of the **device** reference.\n\nThe **content** is going to be the **vertices array**, the **total memory amount** is going to be the **stride** of an individual vertex times the amount of vertices.\n\n```swift\nfunc createBuffers() {\n    let vertexMemSize = MemoryLayout<float3>.stride\n\n    vertexBuffer = device?.makeBuffer(bytes: vertices, length: vertexMemSize * vertices.count, options: [])\n}\n```\n\n---\n\n## Vertex Shader\n\n[Using attributes for arguments](https://metalbyexample.com/vertex-descriptors/)\n[Metal-Shading-Language-Specification](https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf)\n\nWe need to lookup vertex data in the buffer manually, by using the attribute `[[buffer(0)]]`.\n\nThe attribute `[[vertex_id]]` allows us to get the vertex index in the buffer.\n\n```c\nvertex float4 basic_vertex_shader(\n  device float3 *vertices [[ buffer(0) ]], // access the vertices buffer at buffer with index 0\n  uint vertexID [[ vertex_id ]] // get the vertex id, which corresponds to the index of the vertex in the buffer\n){\n    return float4(vertices[vertexID], 1); // return the vertex position in homogeneous screen space\n}\n```\n\n---\n\n## Draw Primitives\n\n[MTL PrimitiveType](https://developer.apple.com/documentation/metal/mtlprimitivetype)\n\nWe **set the buffer** to the **encoder**, so that the **GPU** can use it when executing the **vertex function**.\n\nDrawing the primitives needs a **specific primitive type**, **where we start** to consider vertices, and **how many vertices** we will draw.\n\n```swift\n// send info to render command encoder\nrenderCommandEncoder?.setVertexBuffer(vertexBuffer, offset: 0, index: 0)\n// draw a triangle using the vertices in the buffer\nrenderCommandEncoder?.drawPrimitives(type: MTLPrimitiveType.triangle, vertexStart: 0, vertexCount: vertices.count)\n```\n\n---\n\n## Result\n\n![Picture](/resources/blog/metal-render-pipeline-part-2-rendering-primitive-triangle/cover.jpg)\n"}},"__N_SSG":true}