{"pageProps":{"post":{"slug":"metal-render-pipeline-part-9-draw-indexed-primitives","date":"2022-12-28T01:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 9: Draw Indexed Primitives","excerpt":"Defining the indices array for the meshes, to remove duplicate vertices from the vertices array. Sending the indices array as an index buffer to the GPU, to describe how to render the primitive triangles.","coverImageUrl":"/images/blog/metal-render-pipeline-part-9-draw-indexed-primitives/cover.jpg","coverImageSourceUrl":"https://vulkan-tutorial.com/Vertex_buffers/Index_buffer","coverVideoUrl":"","markdownContent":"\n## Source Code\n\n[See Project in GitHub 👩‍💻](https://github.com/z4gon/metal-render-pipeline)\n\n## References\n\n-   [Metal Render Pipeline tutorial series by Rick Twohy](https://www.youtube.com/playlist?list=PLEXt1-oJUa4BVgjZt9tK2MhV_DW7PVDsg)\n-   [Index Buffer](https://vulkan-tutorial.com/Vertex_buffers/Index_buffer)\n\n---\n\n## Table of Content\n\n-   [Mesh Indices](#mesh-indices)\n-   [Index Buffer](#index-buffer)\n-   [Draw Indexed Primitive](#draw-indexed-primitive)\n\n---\n\n## Mesh Indices\n\nThe **Mesh** now also sets an array of indices to go along the array of vertices.\n\nThis allows to eliminate duplicates and optimize memory utilization.\n\n![Picture](/images/blog/metal-render-pipeline-part-9-draw-indexed-primitives/cover.jpg)\n\n[Image Source 🔗](https://vulkan-tutorial.com/Vertex_buffers/Index_buffer)\n\n```swift\nclass Mesh {\n    public var vertices: [Vertex]! = []\n    public var indices: [UInt32]! = []\n\n    init(){\n        createMesh()\n    }\n\n    func createMesh() {}\n}\n```\n\n```swift\nclass QuadMesh : Mesh{\n    override func createMesh() {\n        vertices = [\n            Vertex(position: float3( 0.5, 0.5,0), color: float4(1,0,0,1)), //Top Right\n            Vertex(position: float3(-0.5, 0.5,0), color: float4(0,1,0,1)), //Top Left\n            Vertex(position: float3(-0.5,-0.5,0), color: float4(0,0,1,1)), //Bottom Left\n            Vertex(position: float3( 0.5,-0.5,0), color: float4(1,0,1,1))  //Bottom Right\n        ]\n\n        indices = [\n            0,1,2,\n            0,2,3\n        ]\n    }\n}\n```\n\n---\n\n## Index Buffer\n\nThe **Mesh Renderer** will create another **MTLBuffer** to send these indexes to the **GPU**.\n\n```swift\nclass MeshRenderer : Component, Renderable {\n\n    ...\n\n    private var _vertexBuffer: MTLBuffer!\n    private var _indexBuffer: MTLBuffer!\n\n    ...\n\n    init(mesh: Mesh) {\n        _mesh = mesh\n\n        _vertexBuffer = Engine.device.makeBuffer(bytes: _mesh.vertices, length: Vertex.stride * _mesh.vertices.count, options: [])\n\n        if(_mesh.indices.count > 0){\n            _indexBuffer = Engine.device.makeBuffer(bytes: _mesh.indices, length: UInt32.stride * _mesh.indices.count, options: [])\n        }\n    }\n}\n```\n\n---\n\n## Draw Indexed Primitive\n\nThe **Mesh Renderer** will draw the primitives by sending the indices as instructions on how to interpret the vertices to draw the triangles.\n\n```swift\nfunc doRender(renderCommandEncoder: MTLRenderCommandEncoder) {\n\n    ...\n\n    if(_mesh.indices.count > 0){\n        renderCommandEncoder.drawIndexedPrimitives(\n            type: MTLPrimitiveType.triangle,\n            indexCount: _mesh.indices.count,\n            indexType: MTLIndexType.uint32,\n            indexBuffer: _indexBuffer,\n            indexBufferOffset: 0,\n            instanceCount: 1 // for now, might change in the future\n        )\n    } else {\n        renderCommandEncoder.drawPrimitives(\n            type: MTLPrimitiveType.triangle,\n            vertexStart: 0,\n            vertexCount: _mesh.vertices.count\n        )\n    }\n}\n```\n"}},"__N_SSG":true}