{"pageProps":{"projects":[{"id":"mario-kart-item-box-vfx","aliases":[],"date":"2022-10","thumbnailUrl":"/videos/thumbnails/mario-kart-item-box-vfx.mp4","metaImageUrl":"/videos/thumbnails/mario-kart-item-box-vfx.mp4","imagesUrls":["/images/projects/mario-kart-item-box-vfx/14.jpg","/images/projects/mario-kart-item-box-vfx/15.jpg"],"videosUrls":["/videos/projects/mario-kart-item-box-vfx/13.mp4","/videos/projects/mario-kart-item-box-vfx/12.mp4","/videos/projects/mario-kart-item-box-vfx/11.mp4","/videos/projects/mario-kart-item-box-vfx/10.mp4","/videos/projects/mario-kart-item-box-vfx/9.mp4","/videos/projects/mario-kart-item-box-vfx/8.mp4","/videos/projects/mario-kart-item-box-vfx/7.mp4","/videos/projects/mario-kart-item-box-vfx/6.mp4","/videos/projects/mario-kart-item-box-vfx/5.mp4","/videos/projects/mario-kart-item-box-vfx/4.mp4","/videos/projects/mario-kart-item-box-vfx/3.mp4","/videos/projects/mario-kart-item-box-vfx/2.mp4","/videos/projects/mario-kart-item-box-vfx/1.mp4"],"youtubeVideoIds":["5UPacp2vzOk"],"primaryImageUrl":null,"primaryVideoUrl":null,"title":"Mario Kart Item Box VFX","subtitle":"Implemented both with pure HLSL and Shader Graph, for the Universal RP in Unity","description":[],"implementationDetails":["Rainbow animation effect, using a grayscale texture to distort the UVs for sampling the rainbow colors.","Utilizing the _Time built in variable to make the UVs offset with time.","Using Culling to only render inner sides of the box.","Transparency implemented using RenderType and Queue for transparency, ZWrite off for best practices, and Blend One One.","Obtaining the view direction by substracting the world space position of the vertex to the _WorldSpaceCameraPos.","Basic Fresnel effect achieved by doing the dot product between the view direction and the normal.","Using built in functions and variables from Core.hlsl and Lighting.hlsl","Obtaining the main light direction using the built in GetMainLight()","Computing a basic Blinn Phong lighting model by reflecting the main light dir along the normal, then doing the dot product with the view dir.","Using a Particle System to render the question mark inside the box.","Using an Animation Controller to implement the animations.","Drawing the textures in Affinity Photo for the box."],"tags":["HLSL","URP","Shader Graph","Unity","Vertex Shader","Fragment Shader"],"gitHubUrl":"https://github.com/z4gon/mario-kart-item-box-vfx","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"technology":"UnityEngine"},{"id":"cg-ball-of-lava-shader-unity","aliases":["ball-of-lava-shader-unity"],"date":"2022-10","thumbnailUrl":"/videos/thumbnails/cg-ball-of-lava-shader-unity.mp4","metaImageUrl":"/videos/thumbnails/cg-ball-of-lava-shader-unity.mp4","imagesUrls":[],"videosUrls":["/videos/projects/cg-ball-of-lava-shader-unity/7.mp4","/videos/projects/cg-ball-of-lava-shader-unity/6.mp4","/videos/projects/cg-ball-of-lava-shader-unity/5.mp4","/videos/projects/cg-ball-of-lava-shader-unity/4.mp4","/videos/projects/cg-ball-of-lava-shader-unity/3.mp4","/videos/projects/cg-ball-of-lava-shader-unity/2.mp4","/videos/projects/cg-ball-of-lava-shader-unity/1.mp4"],"youtubeVideoIds":["r5qDHvfYG9c"],"primaryImageUrl":null,"primaryVideoUrl":null,"title":"Ball of Lava Shader","subtitle":"Written in Cg with ShaderLab, for the Built-in RP in Unity","description":[],"implementationDetails":["Using the Perlin Noise algorithm to displace vertices in the mesh, during the Vertex Shader Stage.","Using _Time to animate the Perlin Noise, also multiplying by _Displacement and _NoiseVelocity to control how much and how fast the noise is.","Displacing the uv coordinates to simulate rotation, multiplying by _RotationVelocity to control the speed.","Generating a Mesh and making sure the UV map wraps correctly, so the Perlin noise doesn't generate weird shapes in the mesh.","Lerping between colors using steps."],"tags":["Cg","Built-in RP","ShaderLab","Unity","Vertex Shader","Fragment Shader"],"gitHubUrl":"https://github.com/z4gon/cg-ball-of-lava-shader-unity","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"technology":"UnityEngine"},{"id":"cg-clipping-shader","aliases":[],"date":"2022-10","thumbnailUrl":"/videos/thumbnails/cg-clipping-shader.mp4","metaImageUrl":"/videos/thumbnails/cg-clipping-shader.mp4","imagesUrls":[],"videosUrls":["/videos/projects/cg-clipping-shader/2.mp4","/videos/projects/cg-clipping-shader/3a.mp4","/videos/projects/cg-clipping-shader/3b.mp4"],"youtubeVideoIds":[],"primaryImageUrl":null,"primaryVideoUrl":null,"title":"Clipping Pixels","subtitle":"Clipping pixels in a Built-in RP shader in Unity, using the Cg programming language","description":[],"implementationDetails":["Clipping using Perlin Noise.","Clipping using cosine function of the Object position of vertices.","Shadow casting and culling manipulation.","Implement a basic Lambert lighting model for better graphic appreciation of the clipping effect."],"tags":["Cg","Built-in RP","ShaderLab","Unity","Vertex Shader","Fragment Shader"],"gitHubUrl":"https://github.com/z4gon/cg-clipping-shader","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"technology":"UnityEngine"},{"id":"cg-transparency-shaders-unity","aliases":[],"date":"2022-10","thumbnailUrl":"/videos/thumbnails/cg-transparency-shaders-unity.mp4","metaImageUrl":"/videos/thumbnails/cg-transparency-shaders-unity.mp4","imagesUrls":[],"videosUrls":["/videos/projects/cg-transparency-shaders-unity/11.mp4","/videos/projects/cg-transparency-shaders-unity/10.mp4","/videos/projects/cg-transparency-shaders-unity/8.mp4","/videos/projects/cg-transparency-shaders-unity/7.mp4","/videos/projects/cg-transparency-shaders-unity/6.mp4","/videos/projects/cg-transparency-shaders-unity/5.mp4","/videos/projects/cg-transparency-shaders-unity/4.mp4","/videos/projects/cg-transparency-shaders-unity/3.mp4","/videos/projects/cg-transparency-shaders-unity/2.mp4","/videos/projects/cg-transparency-shaders-unity/1.mp4"],"youtubeVideoIds":[],"primaryImageUrl":null,"primaryVideoUrl":null,"title":"Transparent Shaders","subtitle":"Transparency shaders written in Cg for the Built-in RP in Unity","description":[],"implementationDetails":["Standard Surface Shader using alpha:blend to control the transparency.","Setting RenderType and Queue to Transparent, and disabling ZWrite.","Writing a second Pass for the Surface Shader with alphatest and addshadow, to create shadows that match the transparency.","Writing refractions and reflections from scratch in an Unlit shader.","Using GrabPass to get a texture with the current pixels in the Frame Buffer.","Using ComputeGrabScreenPos, tex2Dproj and UNITY_PROJ_COORD to get the pixel from the GrabPass texture.","Distorting the GrabPass pixel with the Normal Map, to generate refraction.","Using the SkyBox/CubeMap texture to create environmental reflections.","Using WorldSpaceViewDir to obtain the direction of the camera to the pixel.","Using the built in Cg function reflect(), to get the reflection vector along the normal vector in world space (From UnityObjectToWorldNormal).","Finally getting the reflection color by sampling the cube texture with texCUBE and the reflection vector."],"tags":["Cg","Built-in RP","ShaderLab","Unity","Surface Shader","Vertex Shader","Fragment Shader"],"gitHubUrl":"https://github.com/z4gon/cg-transparency-shaders-unity","links":[],"appleAppStoreUrl":null,"googlePlayStoreUrl":null,"technology":"UnityEngine"}]},"__N_SSG":true}