{"pageProps":{"allPosts":[{"slug":"metal-render-pipeline-part-11-3d-perspective-projection-matrix","date":"2022-12-29T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 11: 3D Perspective Projection Matrix","excerpt":"Implementing a Camera Component to calculate a view matrix. Updating the view matrix and passing it down to the GPU. Using the view matrix during the vertex shader function to transform the vertex coordinates to view space.","coverImageUrl":"/images/blog/metal-render-pipeline-part-11-3d-perspective-projection-matrix/cover.jpg","coverImageSourceUrl":"","coverVideoUrl":"/videos/blog/metal-render-pipeline-part-11-3d-perspective-projection-matrix/1.mp4"},{"slug":"metal-render-pipeline-part-10-camera-view-matrix","date":"2022-12-28T02:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 10: Camera and View Matrix","excerpt":"Implementing a Camera Component to calculate a view matrix. Updating the view matrix and passing it down to the GPU. Using the view matrix during the vertex shader function to transform the vertex coordinates to view space.","coverImageUrl":"/images/blog/metal-render-pipeline-part-10-camera-view-matrix/cover.jpg","coverImageSourceUrl":"","coverVideoUrl":"/videos/blog/metal-render-pipeline-part-10-camera-view-matrix/1.mp4"},{"slug":"metal-render-pipeline-part-9-draw-indexed-primitives","date":"2022-12-28T01:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 9: Draw Indexed Primitives","excerpt":"Defining the indices array for the meshes, to remove duplicate vertices from the vertices array. Sending the indices array as an index buffer to the GPU, to describe how to render the primitive triangles.","coverImageUrl":"/images/blog/metal-render-pipeline-part-9-draw-indexed-primitives/cover.jpg","coverImageSourceUrl":"https://vulkan-tutorial.com/Vertex_buffers/Index_buffer","coverVideoUrl":""},{"slug":"metal-render-pipeline-part-8-scene-graph","date":"2022-12-28T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 8: Scene Graph","excerpt":"Implementing a Scene Object and a Scene Manager, to be able to render many objects and decouple the state out of the Game View Renderer.","coverImageUrl":"/images/blog/metal-render-pipeline-part-8-scene-graph/cover.jpg","coverImageSourceUrl":"","coverVideoUrl":""},{"slug":"metal-render-pipeline-part-7-3d-affine-transformation-matrices","date":"2022-12-27T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 7: 3D Affine Transformation Matrices","excerpt":"Implementing transformation matrices to convert vertex positions from object space to world space, using the model matrix for transformations. Passing the matrix to the CPU using a buffer, and then doing the matrix multiplication for each vertex in the vertex shader function","coverImageUrl":"/images/blog/metal-render-pipeline-part-7-3d-affine-transformation-matrices/cover.jpg","coverImageSourceUrl":"","coverVideoUrl":""},{"slug":"metal-render-pipeline-part-6-transform-component-mesh-renderer","date":"2022-12-26T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 6: Transform, Components and MeshRenderer","excerpt":"Implementing the Transform objects which will form a tree structure to build the Scene Graph. Adding Components to the Game Object, so that different functionalities and behaviors can be composed inside a Game Object as a list of children components. Finally implementing a MeshRenderer component which will be in charge of rendering the 3D mesh associated with the Game Object.","coverImageUrl":"/images/blog/metal-render-pipeline-part-6-transform-component-mesh-renderer/cover.jpg","coverImageSourceUrl":"","coverVideoUrl":""},{"slug":"metal-render-pipeline-part-5-game-object-caches-renderer","date":"2022-12-21T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 5: Game Object, Objects Caches and Renderer","excerpt":"Organizing the code in sub classes to build the foundations of what is to come for this basic game engine. Delegating the rendering to an MTKViewDelegate, and also drawing the primitives in the dedicated Game Object class.","coverImageUrl":"/images/blog/metal-render-pipeline-part-5-game-object-caches-renderer/cover.jpg","coverImageSourceUrl":"https://unsplash.com/photos/CxE1H2_9B9s","coverVideoUrl":""},{"slug":"metal-render-pipeline-part-4-vertex-descriptors","date":"2022-12-20T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 4: Vertex Descriptors","excerpt":"Describing the memory layout for the vertices in the vertex buffer, so the vertex shader can pick them up individually.","coverImageUrl":"/images/blog/metal-render-pipeline-part-4-vertex-descriptors/cover.jpg","coverImageSourceUrl":"https://unsplash.com/photos/COFXWa6LJdw","coverVideoUrl":""},{"slug":"metal-render-pipeline-part-3-vertex-fragment-shaders","date":"2022-12-01T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 3: Vertex and Fragment Shaders","excerpt":"Modeling the vertices data as structs in the CPU side, then passing this data through a buffer to the GPU. Modeling the data structures for vertex and fragment functions in the GPU side. Accessing the interpolated values after rasterization to render corresponding colors for pixels on screen.","coverImageUrl":"/images/blog/metal-render-pipeline-part-3-vertex-fragment-shaders/cover.jpg","coverImageSourceUrl":"","coverVideoUrl":""},{"slug":"metal-render-pipeline-part-2-rendering-primitive-triangle","date":"2022-11-30T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 2: Rendering a primitive Triangle","excerpt":"Rendering a primitive triangle using the GPU, a vertices array, and a memory buffer. Writing a vertex function to access the individual vertices and passing them down to the fragment stage shader.","coverImageUrl":"/images/blog/metal-render-pipeline-part-2-rendering-primitive-triangle/cover.jpg","coverImageSourceUrl":"","coverVideoUrl":""},{"slug":"metal-render-pipeline-part-1-setting-up-the-project","date":"2022-11-29T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 1: Setting up the Project","excerpt":"Following the amazing tutorial series by Rick Twohy, creating a basic macos app project in xcode using Swift and Storyboards. Utilizing the Metal Kit library to access the Metal APIs to render 3D graphics, initializing the basic components to setup the render pipeline and start outputing 3D graphics on the screen.","coverImageUrl":"/images/blog/metal-render-pipeline-part-1-setting-up-the-project/cover.jpg","coverImageSourceUrl":"https://unsplash.com/photos/ICTjWYzpoc0","coverVideoUrl":""}]},"__N_SSG":true}