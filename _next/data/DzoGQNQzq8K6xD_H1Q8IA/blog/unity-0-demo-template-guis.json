{"pageProps":{"post":{"slug":"unity-0-demo-template-guis","date":"2023-07-08T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Unity: Pan, Zoom and Orbit for your Demo Projects","excerpt":"UI elements to Orbit, Zoom, Pan and Reset View. GUIs to tweak values for demo purposes.","coverImageUrl":"/images/blog/unity-0-demo-template-guis/12.jpg","coverImageSourceUrl":"","coverVideoUrl":"/videos/blog/unity-0-demo-template-guis/1.mp4","markdownContent":"\n## Source Code\n\n[See Project in GitHub üë©‚Äçüíª](https://github.com/z4gon/unity-project-template-urp)\n\n## References\n\n- [Input System Package](https://docs.unity3d.com/Packages/com.unity.inputsystem@1.6/manual/index.html)\n- [On-screen Controls](https://docs.unity3d.com/Packages/com.unity.inputsystem@1.0/manual/OnScreen.html)\n\n## Table of Content\n\n- [Source Code](#source-code)\n- [References](#references)\n- [Table of Content](#table-of-content)\n- [Final Result](#final-result)\n- [Input Actions](#input-actions)\n- [On Screen Controls](#on-screen-controls)\n  - [Connecting to the Camera Navigation](#connecting-to-the-camera-navigation)\n- [Camera Navigation](#camera-navigation)\n  - [Pan View](#pan-view)\n  - [Zoom View](#zoom-view)\n  - [Orbit View](#orbit-view)\n- [GUIs for Playground](#guis-for-playground)\n\n## Final Result\n\nA demo scene with view control to navigate the scene, and a playground to tweak values in the demo.\n\n![Picture](/images/blog/unity-0-demo-template-guis/12.jpg)\n\n## Input Actions\n\nUsing the `Input System Package` from Unity, create an `Input Actions` asset and setup the `Action Maps`.\n\n- Orbit and Pan will be `Action Type` set to `Value`, because we want the actual `Vector2` coming from the analog stick on screen.\n- The `Control Type` will be set to `Stick`, so we can bind it to the `Gamepad Stick`.\n- The `Binding` will be set to the `Left Stick` and `Right Stick`, correspondingly.\n\n![Picture](/images/blog/unity-0-demo-template-guis/1.jpg)\n![Picture](/images/blog/unity-0-demo-template-guis/2.jpg)\n\n## On Screen Controls\n\nWe will need to add `Unity UI` Game Objects to represent the analog sticks on the screen.\n\n- Adding the built in `On-Screen Stick` behavior to the image component will do it.\n- We need to set the `Control Path` of the on screen stick to `Left Stick [Gamepad]` and `Right Stick [Gamepad]` correspondingly.\n\n![Picture](/images/blog/unity-0-demo-template-guis/3.jpg)\n![Picture](/images/blog/unity-0-demo-template-guis/4.jpg)\n![Picture](/images/blog/unity-0-demo-template-guis/5.jpg)\n\n### Connecting to the Camera Navigation\n\n- The GUI elements will just invoke methods on the main `HUD` class.\n- In turn, the `HUD` will invoke the methods in the `CameraNavigation` object, to actually move the `Camera` around.\n- This makes this really easy to setup, just assign the `CameraNavigation` object to the `HUD` and you are done.\n- In turn, the `CameraNavigation` will search for the active `Camera` automatically.\n\n![Picture](/images/blog/unity-0-demo-template-guis/6.jpg)\n![Picture](/images/blog/unity-0-demo-template-guis/7.jpg)\n![Picture](/images/blog/unity-0-demo-template-guis/8.jpg)\n\n## Camera Navigation\n\nThis is just a class that will move the main `Camera` around, reacting to our input.\n\n![Picture](/images/blog/unity-0-demo-template-guis/9.jpg)\n\n### Pan View\n\n- Given the `Vector2` amount of movement from the analog stick, we move the camera along its `up/down` and `right/left` directions.\n- We also reposition the orbit pivot, which will be used later for orbiting around it.\n\n```cs\nprivate void HandlePan()\n{\n    if (panAmount == Vector2.zero) { return; }\n\n    var direction = cameraTransform.right * panAmount.x + cameraTransform.up * panAmount.y;\n\n    cameraTransform.position += direction * (panSpeed * Time.deltaTime);\n\n    PositionPivot();\n}\n```\n\n- The Pivot point is calculated by raycasting the `Camera` forward direction into a `Plane` defined parallel to the ground, at the `Zero` position.\n\n```cs\nprivate void PositionPivot()\n{\n    var distance = 0.0f;\n\n    var ray = new Ray(cameraTransform.position, cameraTransform.forward);\n\n    if (floorPlane.Raycast(ray, out distance))\n    {\n        transform.position = ray.GetPoint(distance);\n    }\n}\n```\n\n### Zoom View\n\n- Zooming is easier, just moving the `Camera` along its `forward` direction.\n\n```cs\nprivate void HandleZoom()\n{\n    if (zoomState == ZoomState.None) { return; }\n\n    var direction = transform.position - cameraTransform.position;\n    var distance = direction.magnitude;\n\n    if (zoomState == ZoomState.ZoomingIn && distance < cameraMinDistanceToPivot)\n    {\n        return;\n    }\n\n    direction = direction.normalized * (int)zoomState; // invert if zooming out\n\n    cameraTransform.position += direction * (zoomSpeed * Time.deltaTime);\n}\n```\n\n### Orbit View\n\n- Orbiting is easy thanks to the `RotateAround` helper function from Unity.\n- We make the `Camera` rotate around the pivot position, around the world `up` direction, and around the `right` direction of the camera.\n\n```cs\nprivate void HandleOrbit()\n{\n    if (orbitAmount == Vector2.zero) { return; }\n\n    cameraTransform.RotateAround(transform.position, Vector3.up, -1.0f * orbitAmount.x * orbitSpeed * Time.deltaTime);\n    cameraTransform.RotateAround(transform.position, cameraTransform.right, orbitAmount.y * orbitSpeed * Time.deltaTime);\n}\n```\n\n## GUIs for Playground\n\n- A set of `GUI` inputs to let you tweak values for the demo.\n- These can be hooked up via events to your objects and shaders, to showcase behavior.\n\n![Picture](/images/blog/unity-0-demo-template-guis/10.jpg)\n![Picture](/images/blog/unity-0-demo-template-guis/11.jpg)\n"}},"__N_SSG":true}