{"pageProps":{"allPosts":[{"slug":"metal-render-pipeline-part-3-vertex-fragment-shaders","date":"2022-12-01T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 3: Vertex and Fragment Shaders","excerpt":"Modeling the vertices data as structs in the CPU side, then passing this data through a buffer to the GPU. Modeling the data structures for vertex and fragment functions in the GPU side. Accessing the interpolated values after rasterization to render corresponding colors for pixels on screen.","coverImageUrl":"/images/blog/metal-render-pipeline-part-3-vertex-fragment-shaders/cover.jpg","coverImageSourceUrl":""},{"slug":"metal-render-pipeline-part-2-rendering-primitive-triangle","date":"2022-11-30T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 2: Rendering a primitive triangle","excerpt":"Rendering a primitive triangle using the GPU, a vertices array, and a memory buffer. Writing a vertex function to access the individual vertices and passing them down to the fragment stage shader.","coverImageUrl":"/images/blog/metal-render-pipeline-part-2-rendering-primitive-triangle/cover.jpg","coverImageSourceUrl":""},{"slug":"metal-render-pipeline-part-1-setting-up-the-project","date":"2022-11-29T00:00:00.000Z","author":{"name":"Gonzalo Cumini","pictureUrl":"/images/avatars/z4gon.jpg"},"title":"Metal Render Pipeline Part 1: Setting up the Project","excerpt":"Following the amazing tutorial series by Rick Twohy, creating a basic macos app project in xcode using Swift and Storyboards. Utilizing the Metal Kit library to access the Metal APIs to render 3D graphics, initializing the basic components to setup the render pipeline and start outputing 3D graphics on the screen.","coverImageUrl":"/images/blog/metal-render-pipeline-part-1-setting-up-the-project/cover.jpg","coverImageSourceUrl":"https://unsplash.com/photos/ICTjWYzpoc0"}]},"__N_SSG":true}